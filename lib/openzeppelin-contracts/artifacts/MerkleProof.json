{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"goerli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"linkReferences": {},
			"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cc2e610b76fbc1fe0abe30870e6096b00141d059452bb956756fd0ee327ce62064736f6c63430008160033",
			"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x2E PUSH2 0xB76 0xFB 0xC1 INVALID EXP 0xBE ADDRESS DUP8 0xE PUSH1 0x96 0xB0 ADD COINBASE 0xD0 MSIZE GASLIMIT 0x2B 0xB9 JUMP PUSH22 0x6FD0EE327CE62064736F6C6343000816003300000000 ",
			"sourceMap": "1353:22981:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
		},
		"deployedBytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"immutableReferences": {},
			"linkReferences": {},
			"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cc2e610b76fbc1fe0abe30870e6096b00141d059452bb956756fd0ee327ce62064736f6c63430008160033",
			"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x2E PUSH2 0xB76 0xFB 0xC1 INVALID EXP 0xBE ADDRESS DUP8 0xE PUSH1 0x96 0xB0 ADD COINBASE 0xD0 MSIZE GASLIMIT 0x2B 0xB9 JUMP PUSH22 0x6FD0EE327CE62064736F6C6343000816003300000000 ",
			"sourceMap": "1353:22981:1:-:0;;;;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "17000",
				"executionCost": "92",
				"totalCost": "17092"
			},
			"internal": {
				"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)": "infinite",
				"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
				"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)": "infinite",
				"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
				"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)": "infinite",
				"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
				"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)": "infinite",
				"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
				"processProof(bytes32[] memory,bytes32)": "infinite",
				"processProof(bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
				"processProofCalldata(bytes32[] calldata,bytes32)": "infinite",
				"processProofCalldata(bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
				"verify(bytes32[] memory,bytes32,bytes32)": "infinite",
				"verify(bytes32[] memory,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
				"verifyCalldata(bytes32[] calldata,bytes32,bytes32)": "infinite",
				"verifyCalldata(bytes32[] calldata,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": [
		{
			"inputs": [],
			"name": "MerkleProofInvalidMultiproof",
			"type": "error"
		}
	]
}